import openpyxl
import telebot
from telebot import *
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot import types
import os
import threading
import time
from datetime import datetime
import json
from get_exel_data import *
# –ú–∞–ø–ø–∏–Ω–≥ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ —è—á–µ–µ–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–∞—Ä
def load_mapping(file_name="mapping.json"):
    with open(file_name, "r", encoding="utf-8") as f:
        return json.load(f)

mapping = load_mapping()
DAYS_MAPPING = mapping["DAYS_MAPPING"]
VO_DAYS_MAPPING = mapping["VO_DAYS_MAPPING"]
GROUP_ROOM_MAPPING = mapping["GROUP_ROOM_MAPPING"]

token = ""
bot = telebot.TeleBot(token)
user_data = {}
def back_button(callback_data):
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø."""
    return types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=callback_data)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    chat_id = message.chat.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if str(chat_id) not in users:
        users[str(chat_id)] = True
        save_users(users)
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç", callback_data="search_student"),
        types.InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="search_teacher")
    )
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –∏—Å–∫–∞—Ç—å:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–°—Ç—É–¥–µ–Ω—Ç"
@bot.callback_query_handler(func=lambda call: call.data == "search_student")
def select_education_type(call):
    chat_id = call.message.chat.id

    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º
    if chat_id in user_data:
        user_data.pop(chat_id)  # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_data[chat_id] = {"search_type": "student"}  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("SPO", callback_data="education_spo"),
        types.InlineKeyboardButton("VO", callback_data="education_vo")
    )
    markup.add(back_button("back_to_search"))  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"

    sent_message = bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data[chat_id]["last_bot_message_id"] = sent_message.message_id


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("week_"))
def select_week(call):
    week = call.data.split("_")[1]
    user_data[call.message.chat.id]["week"] = week  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    markup = types.InlineKeyboardMarkup()
    for day in DAYS_MAPPING.keys():
        markup.add(types.InlineKeyboardButton(day.capitalize(), callback_data=f"day_{day}"))
    markup.add(back_button("education_spo"))  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=markup)

# –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
def select_day(message):
    user_data[message.chat.id]["group_name"] = message.text.strip()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    last_bot_message_id = user_data[message.chat.id].get("last_bot_message_id")
    if last_bot_message_id:
        try:
            bot.delete_message(message.chat.id, last_bot_message_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –Ω–µ–¥–µ–ª–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="week_this"),
        types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="week_next")
    )
    markup.add(back_button("education_spo"))  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–∞ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("education_"))
def ask_group_name(call):
    education_type = call.data.split("_")[1].upper()
    user_data[call.message.chat.id]["education_type"] = education_type

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.clear_step_handler_by_chat_id(call.message.chat.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    markup = types.InlineKeyboardMarkup()
    markup.add(back_button("search_student"))  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    sent_message = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã(–Ω–∞–ø—Ä–∏–º–µ—Ä C7124–ë. C - eng, –ë - ru):", reply_markup=markup)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    user_data[call.message.chat.id]["last_bot_message_id"] = sent_message.message_id
    bot.register_next_step_handler(sent_message, select_day)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("day_"))
def show_schedule(call):
    day = call.data.split("_")[1]
    user_data[call.message.chat.id]["day"] = day
    week = user_data[call.message.chat.id].get("week")
    education_type = user_data[call.message.chat.id]["education_type"]
    group_name = user_data[call.message.chat.id]["group_name"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–µ–¥–µ–ª–∏ –∏ —Ç–∏–ø–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    if week == "this":
        file_name = "this_spo.xlsx" if education_type == "SPO" else "this_vo.xlsx"
    elif week == "next":
        file_name = "next_spo.xlsx" if education_type == "SPO" else "next_vo.xlsx"

    try:
        workbook = openpyxl.load_workbook(file_name, data_only=True)
    except FileNotFoundError:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –û—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å –ª–æ–≥–∏–∫–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞
    found_group = False
    for sheet_name in workbook.sheetnames:
        sheet = workbook[sheet_name]
        column = get_group_data(sheet, group_name)
        if column:
            schedule = extract_schedule(sheet, column, day, education_type, sheet_name)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–∞—Ä
            if not schedule:
                markup = types.InlineKeyboardMarkup()
                markup.add(back_button("back_to_day_selection"))  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–∞ –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                bot.send_message(call.message.chat.id, f"–ù–∞ {day.capitalize()} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –ø–∞—Ä –Ω–µ—Ç.", reply_markup=markup)

            else:
                markup = types.InlineKeyboardMarkup()
                markup.add(back_button("back_to_day_selection"))  # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                bot.send_message(call.message.chat.id, display_schedule(schedule, group_name), reply_markup=markup)

            found_group = True
            break

    if not found_group:
        bot.send_message(call.message.chat.id, f"–ì—Ä—É–ø–ø–∞ '{group_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ {file_name}.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
@bot.callback_query_handler(func=lambda call: call.data == "search_teacher")
def ask_teacher_name(call):
    user_data[call.message.chat.id] = {"search_type": "teacher"}

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.clear_step_handler_by_chat_id(call.message.chat.id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    markup = types.InlineKeyboardMarkup()
    markup.add(back_button("back_to_search"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Ñ–∞–º–∏–ª–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    sent_message = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò. –ò.):", reply_markup=markup)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    user_data[call.message.chat.id]["last_bot_message_id"] = sent_message.message_id
    bot.register_next_step_handler(sent_message, select_teacher_week_step)


def select_teacher_week_step(message):
    user_data[message.chat.id]["teacher_name"] = message.text.strip()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
    last_bot_message_id = user_data[message.chat.id].get("last_bot_message_id")
    if last_bot_message_id:
        try:
            bot.delete_message(message.chat.id, last_bot_message_id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –Ω–µ–¥–µ–ª–∏
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="teacher_week_this"),
        types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="teacher_week_next")
    )
    markup.add(back_button("search_teacher"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –Ω–µ–¥–µ–ª–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=markup)
    user_data[message.chat.id]["last_bot_message_id"] = sent_message.message_id

@bot.callback_query_handler(func=lambda call: call.data.startswith("teacher_week_"))
def select_teacher_week(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º."""
    week = call.data.split("_")[2]
    user_data[call.message.chat.id]["week"] = week  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –≤—ã–±–æ—Ä–æ–º –Ω–µ–¥–µ–ª–∏)
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = InlineKeyboardMarkup(row_width=2)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é (–æ—Ç–¥–µ–ª—å–Ω—ã–º —Ä—è–¥–æ–º)
    markup.add(InlineKeyboardButton("üìÖ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é", callback_data="show_week_schedule"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–≤ –¥–≤–∞ —Ä—è–¥–∞)
    day_buttons = [InlineKeyboardButton(day.capitalize(), callback_data=f"teacher_day_{day}") for day in DAYS_MAPPING.keys()]
    markup.add(*day_buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç—Ç–∞–ø
    markup.add(back_button("search_teacher"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "show_week_schedule")
def show_week_schedule(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é."""
    chat_id = call.message.chat.id
    teacher_name = user_data[chat_id].get("teacher_name")
    week = user_data[chat_id].get("week")

    if not teacher_name or not week:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω–æ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –Ω–µ–¥–µ–ª—è.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
    try:
        workbook = openpyxl.load_workbook(f"{week}_spo.xlsx", data_only=True)
    except FileNotFoundError:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {week} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    schedule = []
    for sheet_name in workbook.sheetnames:
        sheet = workbook[sheet_name]
        for day in DAYS_MAPPING.keys():
            daily_schedule = search_teacher(sheet, sheet_name, teacher_name, target_day=day, education_type="SPO")
            schedule.extend(daily_schedule)

    if not schedule:
        bot.send_message(chat_id, f"–ù–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    image_path = generate_week_schedule_image(schedule, teacher_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    with open(image_path, "rb") as img:
        bot.send_document(chat_id, img)

    # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    if os.path.exists(image_path):
        os.remove(image_path)

@bot.callback_query_handler(func=lambda call: call.data.startswith("teacher_day_"))
def show_teacher_schedule(call):
    """ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è """
    day = call.data.split("_")[2]
    chat_id = call.message.chat.id
    teacher_name = user_data[chat_id]["teacher_name"]
    week = user_data[chat_id].get("week")

    # –§–∞–π–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏
    file_names = ["this_spo.xlsx", "this_vo.xlsx"] if week == "this" else ["next_spo.xlsx", "next_vo.xlsx"]

    print(f"[DEBUG] –ü–æ–∏—Å–∫ –¥–ª—è {teacher_name}, –¥–µ–Ω—å: {day}, –Ω–µ–¥–µ–ª—è: {week}")

    found_data = []

    for file_name in file_names:
        try:
            workbook = openpyxl.load_workbook(file_name, data_only=True)
        except FileNotFoundError:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: –§–∞–π–ª {file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            continue

        education_type = "SPO" if "spo" in file_name.lower() else "VO"

        for sheet_name in workbook.sheetnames:
            sheet = workbook[sheet_name]

            # –î–ª—è VO –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞–ø–ø–∏–Ω–≥
            if education_type == "VO":
                vo_mapping = determine_vo_sheet_mapping(sheet_name)
                if not vo_mapping:
                    continue

            # –ü–æ–∏—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            results = search_teacher(sheet, sheet_name, teacher_name, target_day=day, education_type=education_type)
            found_data.extend(results)

    # **–î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã –∏ –≤—Ä–µ–º–µ–Ω–∏**
    found_data.sort(key=lambda x: (
        int(x.get("pair", "0")) if x.get("pair", "0").isdigit() else 0,  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –ø–∞—Ä—ã
        x.get("time", ["00:00"])[0]  # –ï—Å–ª–∏ –ø–∞—Ä—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞—á–∞–ª—É –∑–∞–Ω—è—Ç–∏—è
    ))

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    markup = types.InlineKeyboardMarkup()
    markup.add(back_button(f"teacher_week_{week}"))

    if not found_data:
        bot.send_message(chat_id, f"–ù–∞ {day.capitalize()} –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name} –ø–∞—Ä –Ω–µ—Ç.", reply_markup=markup)
    else:
        bot.send_message(chat_id, display_schedule(found_data, teacher_name), reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@bot.callback_query_handler(func=lambda call: call.data.startswith("back_"))
def go_back(call):
    chat_id = call.message.chat.id

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞ (—Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)
    search_type = user_data.get(chat_id, {}).get("search_type")

    if call.data == "back_to_search":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É "–°—Ç—É–¥–µ–Ω—Ç/–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç", callback_data="search_student"),
            types.InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="search_teacher")
        )
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –∏—Å–∫–∞—Ç—å:", reply_markup=markup)

    elif call.data == "back_to_group_selection" and search_type == "student":
        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("SPO", callback_data="education_spo"),
            types.InlineKeyboardButton("VO", callback_data="education_vo")
        )
        markup.add(back_button("back_to_search"))  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–µ–¥—ë—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", reply_markup=markup)

    elif call.data == "back_to_teacher_search" and search_type == "teacher":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–ø—Ä–æ—Å—É —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        markup = types.InlineKeyboardMarkup()
        markup.add(back_button("back_to_search"))
        sent_message = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò. –ò.):", reply_markup=markup)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ
        user_data[chat_id]["last_bot_message_id"] = sent_message.message_id
        bot.register_next_step_handler(sent_message, select_teacher_week_step)

    elif call.data == "back_to_day_selection" and search_type == "student":
        # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        markup = InlineKeyboardMarkup()
        for day in DAYS_MAPPING.keys():
            markup.add(InlineKeyboardButton(day.capitalize(), callback_data=f"day_{day}"))
        markup.add(back_button("back_to_group_selection"))  # –ù–∞–∑–∞–¥ –Ω–∞ –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=markup)

    elif call.data == "back_to_day_selection" and search_type == "teacher":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        markup = InlineKeyboardMarkup()
        for day in DAYS_MAPPING.keys():
            markup.add(InlineKeyboardButton(day.capitalize(), callback_data=f"teacher_day_{day}"))
        markup.add(back_button("back_to_teacher_search"))  # –ù–∞–∑–∞–¥ –Ω–∞ –≤—ã–±–æ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=markup)

    elif call.data == "back_to_week_selection" and search_type == "student":
        # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="week_this"),
            types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="week_next")
        )
        markup.add(back_button("back_to_group_selection"))  # –ù–∞–∑–∞–¥ –Ω–∞ –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", reply_markup=markup)

    elif call.data == "back_to_week_selection" and search_type == "teacher":
        # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("–≠—Ç–∞ –Ω–µ–¥–µ–ª—è", callback_data="teacher_week_this"),
            types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="teacher_week_next")
        )
        markup.add(back_button("back_to_teacher_search"))
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=markup)


ADMIN_ID = 6328346430  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

@bot.message_handler(content_types=['document'])
def handle_document(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    chat_id = message.chat.id

    if chat_id != ADMIN_ID:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–∞–π–ª–∞
    user_data[chat_id] = {"file_id": message.document.file_id}

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –¥–ª—è –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –æ–±—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üìö –°–ü–û", callback_data="schedule_spo"),
        types.InlineKeyboardButton("üèõ –í–û", callback_data="schedule_vo")
    )

    bot.send_message(chat_id, "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—É—á–µ–Ω–∏—è:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["schedule_spo", "schedule_vo"])
def choose_week_upload(call):
    """–í—ã–±–æ—Ä, –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"""
    chat_id = call.message.chat.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–°–ü–û –∏–ª–∏ –í–û)
    user_data[chat_id]["schedule_type"] = call.data.split("_")[1]

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üìÖ –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="update_this"),
        types.InlineKeyboardButton("‚è≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", callback_data="update_next")
    )

    bot.send_message(chat_id, "üìÇ –ö—É–¥–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["update_this", "update_next"])
def process_schedule_upload(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    chat_id = call.message.chat.id

    if chat_id != ADMIN_ID:
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–°–ü–û –∏–ª–∏ –í–û)
    schedule_type = user_data.get(chat_id, {}).get("schedule_type")
    if not schedule_type:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–°–ü–û –∏–ª–∏ –í–û).")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∞–π–ª–∞
    file_id = user_data.get(chat_id, {}).get("file_id")
    if not file_id:
        bot.send_message(chat_id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –∑–∞–Ω–æ–≤–æ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º —Ñ–∞–π–ª
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —É—á–µ—Ç–æ–º –≤—ã–±–æ—Ä–∞ –°–ü–û / –í–û
    if call.data == "update_this":
        file_name = f"this_{schedule_type}.xlsx"  # –ù–∞–ø—Ä–∏–º–µ—Ä, this_spo.xlsx –∏–ª–∏ this_vo.xlsx
    else:
        file_name = f"next_{schedule_type}.xlsx"  # –ù–∞–ø—Ä–∏–º–µ—Ä, next_spo.xlsx –∏–ª–∏ next_vo.xlsx

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(file_name, 'wb') as new_file:
        new_file.write(downloaded_file)

    bot.send_message(chat_id, f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ `{file_name}`.")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    notify_users()

    # –û—á–∏—â–∞–µ–º user_data
    user_data.pop(chat_id, None)

def auto_update_schedule():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"""
    while True:
        now = datetime.now()
        if now.weekday() == 0:  # 0 - —ç—Ç–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            try:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã this_spo.xlsx –∏ this_vo.xlsx
                if os.path.exists("this_spo.xlsx"):
                    os.remove("this_spo.xlsx")
                if os.path.exists("this_vo.xlsx"):
                    os.remove("this_vo.xlsx")

                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º next –≤ this
                if os.path.exists("next_spo.xlsx"):
                    os.rename("next_spo.xlsx", "this_spo.xlsx")
                if os.path.exists("next_vo.xlsx"):
                    os.rename("next_vo.xlsx", "this_vo.xlsx")

                print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

            # –ñ–¥–µ–º 24 —á–∞—Å–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –≤ –æ–¥–∏–Ω –¥–µ–Ω—å
            time.sleep(86400)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤
            time.sleep(21600)

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
update_thread = threading.Thread(target=auto_update_schedule, daemon=True)
update_thread.start()

USER_DB_FILE = "users.json"

def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(USER_DB_FILE, "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_users(users):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    with open(USER_DB_FILE, "w") as f:
        json.dump(users, f)

users = load_users()

def notify_users():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –Ω–æ–≤–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"""
    text = "‚ùó–í–Ω–∏–º–∞–Ω–∏–µ, —Å—Ç—É–¥–µ–Ω—Ç—ã‚ùó –î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –°–ü–û‚ùó –î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –í–û‚ùó"
    
    for user_id in users.keys():
        try:
            bot.send_message(user_id, text)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

bot.infinity_polling()