import openpyxl
import json
import re
import pandas as pd
import matplotlib.pyplot as plt

# –ú–∞–ø–ø–∏–Ω–≥ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –∏ —è—á–µ–µ–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–∞—Ä


def load_mapping(file_name="mapping.json"):
    with open(file_name, "r", encoding="utf-8") as f:
        return json.load(f)


mapping = load_mapping()
DAYS_MAPPING = mapping["DAYS_MAPPING"]
VO_DAYS_MAPPING = mapping["VO_DAYS_MAPPING"]
GROUP_ROOM_MAPPING = mapping["GROUP_ROOM_MAPPING"]


def get_group_and_room_cells(sheet):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —è—á–µ–µ–∫ —Å –≥—Ä—É–ø–ø–∞–º–∏ (–µ—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã) –∏ –∫–æ–ª–æ–Ω–∫—É –∞—É–¥–∏—Ç–æ—Ä–∏–π.
    """
    group_cells = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ C7
    if sheet["C7"].value:
        group_cells.append("C7")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ E7
    if sheet["E7"].value:
        group_cells.append("E7")

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±–µ–∏—Ö —è—á–µ–π–∫–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ C7
    if not group_cells:
        group_cells = ["C7"]

    return {"group_cells": group_cells, "room_column": "D"}


def get_group_data(sheet, group_name):
    """
    –ù–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –Ω–∞ –ª–∏—Å—Ç–µ –∏ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    group_cell_mapping = {"C7": "C", "E7": "E"}  # –ì—Ä—É–ø–ø—ã –Ω–∞ –ª–∏—Å—Ç–µ
    for cell, column in group_cell_mapping.items():
        cell_value = sheet[cell].value
        if cell_value and group_name in cell_value:
            return column
    return None


def determine_vo_sheet_mapping(sheet_name):
    normalized_sheet_name = sheet_name.strip().lower()

    if "–ª–∏—Å—Ç1" in normalized_sheet_name:
        return VO_DAYS_MAPPING["–ª–∏—Å—Ç1"]
    elif "–ª–∏—Å—Ç2" in normalized_sheet_name:
        return VO_DAYS_MAPPING["–ª–∏—Å—Ç2"]
    elif "–ª–∏—Å—Ç3" in normalized_sheet_name:
        return VO_DAYS_MAPPING["–ª–∏—Å—Ç3"]
    elif "–ª–∏—Å—Ç4" in normalized_sheet_name:
        return VO_DAYS_MAPPING["–ª–∏—Å—Ç4"]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–æ–≤ —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    if re.match(r"^\d+-\d+", normalized_sheet_name):
        return VO_DAYS_MAPPING.get("–ª–∏—Å—Ç1")
    return None


def normalize_teacher_name(teacher_name):
    if teacher_name:
        teacher_name = re.sub(
            r"(–ø—Ä–µ–ø\.|—Å—Ç\.–ø—Ä–µ–ø\.|–∫—É—Ä–∞—Ç–æ—Ä|–∫\.—ç\.–Ω\.|–∫\.–ø\.–Ω\.|–¥–æ—Ü–µ–Ω—Ç)\s*", "", teacher_name)
        teacher_name = re.sub(r"\s+", " ", teacher_name).strip().lower()
        return re.sub(r"\.\s+", ".", teacher_name)
    return None


def clean_text(value):
    if value:
        return " ".join(str(value).split())
    return None


def display_schedule(schedule, entity):
    if not schedule:
        return f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {entity} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    result = []
    for entry in schedule:
        pair_info = (
            f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {entry.get('day', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìÖ –î–∞—Ç–∞: {entry['date']}\n"
            f"‚Ññ –ü–∞—Ä—ã: {entry['pair']}\n"
            f"üïí –í—Ä–µ–º—è: {entry['time'][0]} - {entry['time'][1]}\n"
            f"üìñ –ü—Ä–µ–¥–º–µ—Ç: {entry['subject']}\n"
            f"üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {entry['room']}"
        )
        if 'teacher' in entry:
            pair_info += f"\nüë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {entry['teacher']}"
        if 'group' in entry:
            pair_info += f"\nüë®‚Äçüéì –ì—Ä—É–ø–ø–∞: {entry['group']}"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result.append(pair_info)

    return "\n-----------------------------------\n".join(result)


def extract_schedule(sheet, column, day, education_type, sheet_name, group_name):
    schedule = []

    if education_type == "SPO":
        day_info = DAYS_MAPPING[day.lower()]
    else:
        vo_mapping = determine_vo_sheet_mapping(sheet_name)
        if not vo_mapping:
            return []
        day_info = vo_mapping[day.lower()]

    pairs_cells = day_info["pairs_cells"]
    time_cells = day_info["time_cells"]
    date_cell = day_info["date_cell"]
    date = sheet[date_cell].value
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º room_column
    if column == "C" and group_name in ["C5222", "C5123"]:
        room_column = "F"
    else:
        room_column = "D" if column == "C" else "F"

    for pair_cell, (time_start, time_end) in zip(pairs_cells, time_cells):
        pair_number = clean_text(sheet[f"A{pair_cell[1:]}"].value)
        subject = clean_text(sheet[f"{column}{pair_cell[1:]}"].value)
        teacher = clean_text(sheet[f"{column}{int(pair_cell[1:]) + 1}"].value)
        room = clean_text(sheet[f"{room_column}{pair_cell[1:]}"].value)

        if subject or teacher or room:
            schedule.append({
                "day": day.capitalize(),
                "pair": pair_number or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                "time": (sheet[time_start].value, sheet[time_end].value),
                "subject": subject or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                "teacher": teacher or "–ù–µ —É–∫–∞–∑–∞–Ω",
                "room": room or "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                "date": date or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            })
    return schedule


def search_teacher(sheet, sheet_name, teacher_name, target_day=None, education_type="SPO"):
    """
    –ò—â–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –≤—Å–µ–º –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏.
    –ï—Å–ª–∏ target_day –ø–µ—Ä–µ–¥–∞–Ω, —Ç–æ –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è.
    """
    teacher_name = normalize_teacher_name(teacher_name)
    result = []

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    if education_type == "SPO":
        days_mapping = DAYS_MAPPING
    else:
        vo_mapping = determine_vo_sheet_mapping(sheet_name)
        if vo_mapping is None:
            return []
        days_mapping = vo_mapping

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≥—Ä—É–ø–ø (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["C7", "E7"])
    group_cells = get_group_and_room_cells(sheet)["group_cells"]
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ["C7", "E7"] –≤ ["C", "E"]
    columns = [cell[0] for cell in group_cells]

    for day in days_mapping.keys():
        if target_day and target_day.lower() != day.lower():
            continue

        day_info = days_mapping[day]
        pairs_cells = day_info["pairs_cells"]
        time_cells = day_info["time_cells"]
        date_cell = day_info["date_cell"]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
        date = sheet[date_cell].value

        for column in columns:
            for pair_cell, (time_start, time_end) in zip(pairs_cells, time_cells):
                pair_number = clean_text(sheet[f"A{pair_cell[1:]}"].value)
                subject = clean_text(sheet[f"{column}{pair_cell[1:]}"].value)
                teacher = clean_text(sheet[f"{column}{int(pair_cell[1:]) + 1}"].value)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è—á–µ–π–∫—É —Å –≥—Ä—É–ø–ø–æ–π
                group_cell = f"{column}7"
                group_name = clean_text(sheet[group_cell].value)

                if column == "C" and group_name in ["C5222, C5123 (–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π —É—á–µ—Ç (–ø–æ –æ—Ç—Ä–∞—Å–ª—è–º))"]:
                    room_column = "F"
                elif column == "C":
                    room_column = "D"
                elif column == "E":
                    room_column = "F"

                room = clean_text(sheet[f"{room_column}{pair_cell[1:]}"].value)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                if teacher and teacher_name in normalize_teacher_name(teacher):
                    result.append({
                        "day": day.capitalize(),
                        "date": date or "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                        "time": (sheet[time_start].value, sheet[time_end].value),
                        "subject": subject or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                        "room": room or "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                        "group": group_name or "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                        "pair": pair_number or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    })


    return result


# –ü–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
DAYS_ORDER = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫",
              "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞"]


def generate_week_schedule_image(schedule, teacher_name):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PNG-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–∞–±–ª–∏—Ü—ã,
    –≥–¥–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏ –¥–∞—Ç—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏.
    """
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –∏ –Ω–æ–º–µ—Ä–∞–º –ø–∞—Ä
    schedule.sort(key=lambda entry: (
        DAYS_ORDER.index(entry.get('day', '').lower()) if entry.get(
            'day', '').lower() in DAYS_ORDER else len(DAYS_ORDER),
        int(entry.get('pair', '0')) if entry.get('pair', '0').isdigit() else 0
    ))

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    data = []
    current_day = None

    for entry in schedule:
        day = entry.get('day', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        date = entry.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')

        # –ï—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        if day != current_day:
            # –°—Ç—Ä–æ–∫–∞-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            data.append([f"{day}, {date}", "", "", "", "", ""])
            current_day = day

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        data.append([
            "",  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
            entry.get('pair', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            f"{entry['time'][0]} - {entry['time'][1]}",
            entry.get('group', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
            entry.get('room', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
            entry.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        ])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
    columns = ['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –¥–∞—Ç–∞', '‚Ññ –ü–∞—Ä—ã',
               '–í—Ä–µ–º—è', '–ì—Ä—É–ø–ø–∞', '–ê—É–¥–∏—Ç–æ—Ä–∏—è', '–ü—Ä–µ–¥–º–µ—Ç']

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    fig, ax = plt.subplots(figsize=(14, len(data) * 0.8))
    ax.axis('off')
    table = ax.table(
        cellText=data,
        colLabels=columns,
        cellLoc='center',
        loc='center',
        colColours=["#f2f2f2"] * len(columns),
        edges='horizontal'
    )

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∏ –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫
    table.auto_set_font_size(False)
    table.set_fontsize(14)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —è—á–µ–π–∫–∞—Ö
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫ (–≤ 2.7 —Ä–∞–∑–∞ —à–∏—Ä–µ –∏ –≤ 2.5 —Ä–∞–∑–∞ –≤—ã—à–µ)
    table.scale(2.7, 2.5)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–¥–µ–ª–∞–µ–º –∏—Ö –∂–∏—Ä–Ω—ã–º–∏ –∏ —Ä–∞–∑–º–µ—Ä–æ–º 16)
    for col_idx in range(len(columns)):
        header_cell = table[0, col_idx]
        header_cell.set_fontsize(18)  # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header_cell.set_text_props(weight='bold')  # –î–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç –∂–∏—Ä–Ω—ã–º

    # –í—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    for row_idx, row in enumerate(data):
        if row[0]:  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –¥–∞—Ç—É
            for col_idx in range(len(columns)):
                cell = table[row_idx, col_idx]
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
                cell.set_facecolor("#d9d9d9")
                cell.set_fontsize(14)  # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    ax.set_title(
        f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name}", fontsize=20, fontweight='bold', pad=20)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    file_name = f"schedule_{teacher_name}.png"
    # –£–≤–µ–ª–∏—á–∏–ª–∏ —á–µ—Ç–∫–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    plt.savefig(file_name, bbox_inches="tight", dpi=300)
    plt.close(fig)

    return file_name
